						#
# vim: ft=conf:fdm=marker:tabstop=4
#


# USEFUL:
# This will throw out trivial whitespace changes and apply to the cached copy:
#
# 	git diff -w --no-color | git apply --cached --ignore-whitespace
#

# --------------------------------------------
# GIT CONCEPTS:
# --------------------------------------------
#
# * Checkout Vs. Reset:
# 		Checkout changes what your current branch is (i.e., it changes where
# 		HEAD is pointing to). Reset changes which commit the current branch is
# 		pointing to.
#
# * Rebase Vs. Merge:
#		Rebasing is similar to merging, but your commits are migrated to the
#		target branch as if those checkins occurred as new commits to its head.
#		The commits are appended to the target branch, not tracked alongside it
#		and merged back in.
#
#		The SHAs of the rebased commits will differ from the original commits.
#		The original commits become "dangling commits", which can be viewed with
#		reflog.
#

# --------------------------------------------
# Undo Last Commit
# --------------------------------------------
#	Use this if your last commit was missing files, or if you need to edit the
#	commit message.  Working tree is left as it was before "reset".
#
#	1. git commit ...
#	2. git reset --soft HEAD^
#	3. (edit files, unstage items with 'git reset HEAD ...' if needed)
#	4. git add ...
#	5. git commit -c ORIG_HEAD
#
#	If you do not need to edit the commit message, you can use '-C' in place
#	of '-c' in the last step.
#
#	!! See git-reset(3) for more info on redoing commits in various scenarios.
#   !! See git-revert(3) for revoking previous commits anywhere in history.
#
# --------------------------------------------
#
# Submodules
# --------------------------------------------
# Add a submodule by specifying the repository url and the local path where the 
# submodule files will live.  Run this from the base of your repository.  The
# submodule paths will be added to the index for commit.
#
#  	git submodule add <url> <path>
#
# Submodules are tracked via the .gitmodules file in your repository base path.
# This just lists the name of the submodule with the url and path you gave.
# Running 'git init' registers each submodule in '.git/config'.
#
# 	git submodule init
#
# View the submodule status to see the checked-out commit for each submodule.
#
#	git submodule status
#	git submodule status --recursive
#	git submodule summary
#
# Use sync to update each submodule's remote location to the url specified
# in '.gitmodules'.  Useful if you modify the url manually for some reason.
#
#	git submodule sync
#	git submodule sync --recursive
# --------------------------------------------


[user]
	# do not guess user.name and user.email, force to set for each repo
	useConfigOnly = true

[alias]
	# Commit shortcut:
	# 	$ git ci
	# 	$ git ci -m "checking in changes to stuff"
	#
	# Commit and use first argument as the commit message:
	# 	$ git cim "added some stuff to the thing"
	#
	# Alter the previous commit:
	# 	$ git fix
	#	$ git fix FILE1.txt FILE2.cs
	#
	ci		= commit
	cim		= commit -m
	fix		= commit --amend -C HEAD

	# Checkout shortcuts:
	# 	$ git co
	# 	$ git co SomeBranch
	#
	# Create a new branch:
	# 	$ git cob MyNewBranchName
	#
	# A "detached head" is a checkout where HEAD is pointed to a specific commit
	# instead of a named branch.  You should NEVER commit to a detached head.
	# 	$ git detach
	#
	co		= checkout
	cob		= checkout -b
	detach	= checkout --detach

	# Branching and Remotes:
	b		= branch
	bv		= !git branch --color -v | cut -c1-140
	rv		= remote -v

	# Various logging commands:
	ps		= log --pretty=oneline origin..master
	ll		= !"git log --pretty=oneline --abbrev-commit |more"
	ls		= log --stat
	lg		= log -g
	graph	= log --graph --all --abbrev-commit --date=relative --pretty=format:'%C(yellow)%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset'
	head	= !"git log -n1"
	heads	= !"git log origin/master.. --format='%C(yellow)%h%Creset;%Cgreen%an%Creset;%H;%C(cyan)%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

	# Status shortcuts:
	s		= status -sb -uno --ignore-submodules=untracked
	st		= status
	sa		= status -sb
	stt	    = status --untracked-files=no

	# Show differences between working repo and remote:
	w		= whatchanged -p
	wo		= whatchanged -p origin..
	in		= !git-incoming
	out		= !git-outgoing

	# Helpers:
	wip		= !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
	unwip	= !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

	# Rebase:
	pullc	= pull --rebase
	rb		= !"git wip;git rebase -i origin/master;git unwip"
	pr		= !"git fetch;git wip;git rebase --stat origin;git unwip;git heads"

	# Generating diffs and patches:
	#
	# Show a diff of staged commits:
	# 	$ git diffc
	# 	$ git diffc some/path/
	#
	# Produce a patch based on HEAD compared with two commits back in history:
	# 	$ git fp HEAD^^
	#
	# Use diff to find stray whitespace at the end of lines:
	# 	$ git check
	# 	$ git check path/to/some/file.txt
	#
	dif		= diff
	diffc	= diff --cached
	check	= diff --check
	fp		= format-patch --stdout

	# Submodules:
	#
	subinit	= submodule init
	subup	= submodule update
	subadd	= submodule add
	subsync = submodule sync
	substat = submodule status

	# Find dangling commits:
	lost	= !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

	# Hide paths from the index so they don't show up even if changed
	hide = !git update-index --assume-unchanged 
	unhide = !git update-index --no-assume-unchanged
	hidden = !git ls-files -v | grep ^[a-z]

	# Add items to the .gitignore
	ignore=!([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore
	
	# Show all aliases configured
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
	alias2	= config --get-regex alias.*

	killremote = "!f(){ git branch -D \"$1\";  git push origin --delete \"$1\"; };f"

[core]
	editor = vim
	autocrlf = true 
	#whitespace = space-before-tab, trailing-space
	whitespace = cr-at-eol
	filemode = false
	#excludesfile = \\\\Dev-AD\\Users\\Ken\\Documents\\gitignore_global.txt

# Set environment GIT_CURL_VERBOSE=1 to debug http/https transactions.  If git
# complains that it cannot verify an SSL certificate, you can disable the check
# with GIT_SSL_NO_VERIFY=1.
#
# Use http.sslCAinfo to provide a path to your cert info.  This will not perform
# shell expansion, so you may want to use GIT_SSL_CAINFO to set this instead.
#
#[http]
#	sslCAinfo = ~/certs/cacert.pem

[color]
	ui = auto
	diff = auto
	branch = auto
	status = auto

[color "diff"]
	meta = blue bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "branch"]
	current = yellow reverse
	local = yellow bold
	remote = green bold
	plain = red bold

[color "status"]
	added = green
	changed = magenta
	untracked = red


[difftool "kdiff3"]
	cmd = "\"c:/program files/kdiff3/kdiff3.exe\" \"$(cygpath -w $BASE)\" \"$(cygpath -w $LOCAL)\" \"$(cygpath -w $REMOTE)\" \"$(cygpath -w $MERGED)\""
	#cmd = "\"c:/program files (x86)/beyond compare 4/bcomp.exe\" \"$(cygpath -w $LOCAL)\" \"$(cygpath -w $REMOTE)\""
    trustExitCode = false
[difftool]
    prompt = false
[diff]
    tool = kdiff3
[mergetool "kdiff3"]
	cmd = "\"c:/program files/kdiff3/kdiff3.exe\" \"$(cygpath -w $BASE)\" \"$(cygpath -w $LOCAL)\" \"$(cygpath -w $REMOTE)\" \"$(cygpath -w $MERGED)\""
    trustExitCode = false
[mergetool]
    keepBackup = false
[merge]
    tool = kdiff3

#[diff]
#	tool = beyond
#[difftool "beyond"]
#	#cmd = "git-diff-wrapper \"$LOCAL\" \"$REMOTE\""
#	cmd = "\"c:/program files (x86)/beyond compare 4/bcomp.exe\" \"$(cygpath -w $LOCAL)\" \"$(cygpath -w $REMOTE)\""
#	#cmd = "\"c:/program files (x86)/beyond compare 3/bcomp.exe\"" "$(cygpath -w $REMOTE)" "$LOCAL"
#[difftool "bc"]
#	path = c:/program files/beyond compare 4/bcomp.exe
#[difftool]
#	tool = bc
#	prompt = false
#
#[merge]
#	tool = beyond
#	keepBackup = false
#[mergetool "bc3"]
#	path = c:/program files (x86)/beyond compare 3/bcomp.exe
#[mergetool "beyond"]
#	cmd = \"c:/program files/beyond compare 4/bcomp.exe\" \"$PWD/$LOCAL\" \"$PWD/$REMOTE\" \"$PWD/$BASE\" \"$PWD/$MERGED\"
	#cmd = "c:/program files (x86)/beyond compare 3/bcomp.exe" "$(cygpath -w $REMOTE)" "$(cygpath -w $LOCAL)"
	#cmd = "git-diff-wrapper \"$LOCAL\" \"$REMOTE\""
	#cmd = "\"c:\/program files (x86)/beyond compare 3/bcomp.exe\" \$REMOTE \$LOCAL "
#	cmd = "~/bin/git-diff-wrapper.sh $LOCAL $REMOTE"
	#trustExitCode = true
#
#

[credential "https://cdit.kilnhg.com"]
	username = ken.stumpf@cditsolutions.com
	helper = cache --timeout 1800



[gui]
	recentrepo = F:/Devel/rispc-again.git

