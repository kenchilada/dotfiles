# vim: ft=conf:fdm=marker:tabstop=4
#

# USEFUL:
# This will throw out trivial whitespace changes and apply to the cached copy:
#
# 	git diff -w --no-color | git apply --cached --ignore-whitespace
#

# --------------------------------------------
# Undo Last Commit
# --------------------------------------------
#	Use this if your last commit was missing files, or if you need to edit the
#	commit message.  Working tree is left as it was before "reset".
#
#	1. git commit ...
#	2. git reset --soft HEAD^
#	3. (edit files, unstage items with 'git reset HEAD ...' if needed)
#	4. git add ...
#	5. git commit -c ORIG_HEAD
#
#	If you do not need to edit the commit message, you can use '-C' in place
#	of '-c' in the last step.
#
#	!! See git-reset(3) for more info on redoing commits in various scenarios.
#	!! See git-revert(3) for revoking previous commits anywhere in history.
#
# --------------------------------------------
# Submodules
# --------------------------------------------
# Add a submodule by specifying the repository url and the local path where the 
# submodule files will live.  Run this from the base of your repository.  The
# submodule paths will be added to the index for commit.
#
#  	git submodule add <url> <path>
#
# Submodules are tracked via the .gitmodules file in your repository base path.
# This just lists the name of the submodule with the url and path you gave.
# Running 'git init' registers each submodule in '.git/config'.
#
# 	git submodule init
#
# View the submodule status to see the checked-out commit for each submodule.
#
#	git submodule status
#	git submodule status --recursive
#	git submodule summary
#
# Use sync to update each submodule's remote location to the url specified
# in '.gitmodules'.  Useful if you modify the url manually for some reason.
#
#	git submodule sync
#	git submodule sync --recursive
# --------------------------------------------


[user]
	useConfigOnly = true
	email = ken.stumpf@cditsolutions.com
	name = Ken Stumpf

[alias]
	# Commit shortcut:
	# 	$ git ci
	# 	$ git ci -m "checking in changes to stuff"
	#
	# Commit and use first argument as the commit message:
	# 	$ git cim "added some stuff to the thing"
	#
	ci		= commit
	cim		= commit -m

	ap		= add --patch

	# Alter the previous commit:
	# 	$ git fix
	#	$ git fix FILE1.txt FILE2.cs
	#
	fix		= commit --amend -C HEAD

	unstage		= reset HEAD --

	co		= checkout
	cob		= checkout -b

	# A "detached head" is a checkout where HEAD is pointed to a specific commit
	# instead of a named branch.  You should NEVER commit to a detached head.
	# 	$ git detach
	#
	detach		= checkout --detach

	# Branching and Remotes:
	b		= branch
	bv		= !git branch --color -v | cut -c1-140
	rv		= remote -v

	cp		= cherry-pick
	cl		= clone

	# Show current commit:
	current		= show --format="%h" --no-patch

	# Tags:
	retag           = !git tag -d $1 && git push origin :refs/tags/$1 && git tag $1 HEAD && git push origin $1 && true

	# Various logging commands:
	ps		= log --pretty=oneline origin..master
	ll		= !"git log --pretty=oneline --abbrev-commit"
	ls		= log --stat
	lg		= log -g
	graph		= log --graph --all --abbrev-commit --date=relative --pretty=format:'%C(yellow)%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset'
	head		= !"git log -n1"
	heads		= !"git log origin/master.. --format='%C(yellow)%h%Creset;%Cgreen%an%Creset;%H;%C(cyan)%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"
	bl		= for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

	# Status shortcuts:
	s		= status -sb -uno --ignore-submodules=untracked
	st		= status
	sa		= status -sb

	# Show differences between working repo and remote:
	w		= whatchanged -p
	wo		= whatchanged -p origin..

	out             = log --pretty=oneline --abbrev-commit --graph @{u}..
	in              = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}

	# Helpers:
	wip		= !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
	unwip		= !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

	# Rebase:
	pullc		= pull --rebase
	rb		= !"git wip;git rebase -i origin/master;git unwip"
	pr		= !"git fetch;git wip;git rebase --stat origin;git unwip;git heads"

	# Generating diffs and patches:
	#
	# Produce a patch based on HEAD compared with two commits back in history:
	# 	$ git fp HEAD^^
	#
	# Use diff to find stray whitespace at the end of lines:
	# 	$ git check
	# 	$ git check path/to/some/file.txt
	#
	dif		= diff
	diffc		= diff --cached
	dc		= diff --cached
	check		= diff --check
	fp		= format-patch --stdout

	# Find dangling commits:
	lost	= !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

	# Hide paths from the index so they don't show up even if changed
	hide = !git update-index --assume-unchanged 
	unhide = !git update-index --no-assume-unchanged
	hidden = !git ls-files -v | grep ^[a-z]

	# Add items to the .gitignore
	ignore=!([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore
	
	# Show all aliases configured
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
	alias2	= config --get-regex alias.*
	last = log -1 --stat

	# run aggressive (but slower) gc
	deepclean = gc --prune=now --aggressive

	# write all untracked files to a zip file
	backup-untracked = "!f() { bfn='backup-untracked-'$(uuidgen|tr -d '-'|sed 's/\\(.\\{8\\}\\).*/\\1/')'.zip'; git ls-files --others --exclude-standard -z | xargs -0 tar rvf ~/$bfn; echo \"Backed up untracked files to ~/$bfn\"; }; f"

[core]
	autocrlf = false
	whitespace = space-before-tab, trailing-space
	filemode = false
	trustctime = false

	# https://github.com/dandavison/delta
	#pager = delta

	# gets rid of ^M in regular diff output
	#pager = tr -d '\\r' | less -REX

[http]
	# For error "Problem with the SSL CA cert" you can run git with GIT_CURL_VERBOSE=1
	# and GIT_TRACE_CURL=1 to see why its failing.
	#
	# If git complains that it cannot verify an SSL certificate, you can disable the 
	# check with GIT_SSL_NO_VERIFY=1 or 'http.sslVerify=false', but that is bad.
	#
	# Use 'http.sslCAinfo' to provide a path to your cert info.  This will not perform
	# shell expansion, so you may want to use GIT_SSL_CAINFO to set this instead. 
	#
	# Note: it seems that GIT_SSL_CAINFO will override 'http.sslCAinfo'

	#sslCAinfo = ~/certs/ca-bundle.crt
	sslVerify = true

[merge]
	tool = beyond
	keepBackup = false
	conflictstyle = diff3

[push]
	default = matching
[credential]
	helper = store
	#helper = cache --timeout=3600
[mergetool]
	keeptemporaries = false
	keepbackups = false
	prompt = false
	trustexitcode = false
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[help]
	# leave at 0 to show suggestions but not auto-execute them
	autocorrect = 0

# https://github.com/dandavison/delta
[delta]
	dark = true

	# themes dont seem to work?? :(
	#-theme = woolly-mammoth
	#syntax-theme = 1337

	side-by-side = true
	line-numbers = true

	max-line-length = 700
	max-line-distance = 0.3
	hunk-header-decoration-style = blue
	hunk-header-line-number-style = purple bold

	navigate = true    # use n and N to move between diff sections
	hyperlinks = false   # not good for terminal
	whitespace-error-style = 22 reverse
	feature = decorations

[delta "decorations"]
    file-style = bold yellow ul
	file-decoration-style = yellow ol ul

	#commit-decoration-style = bold yellow box ul
    commit-decoration-style = blue ol
    #commit-style = raw

	# hunks are shown under each file
    hunk-header-decoration-style = blue box
    hunk-header-file-style = "#00d0e0"
    hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax

[diff]
	# Show blocks of moved text of at least 20 alphanumeric characters differently than adds/deletes
	# https://blog.github.com/2018-04-05-git-217-released/
	colorMoved = default

	# Detect copies in addition to renames
	renames = copies

[interactive]
	diffFilter = delta --color-only --features=interactive

[log]
	date = human

[color]
	ui = auto
	#diff = auto
	#branch = auto
	#status = auto

[color "diff"]
	meta = blue bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "branch"]
	current = yellow reverse
	local = yellow bold
	remote = green bold
	plain = red bold

[color "status"]
	added = green
	changed = magenta
	untracked = red

[safe]
	directory = *
